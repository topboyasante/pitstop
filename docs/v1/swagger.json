{
    "swagger": "2.0",
    "info": {
        "description": "A RESTful API built with Go and Fiber",
        "title": "Pitstop API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/auth": {
            "get": {
                "description": "Redirects user to Google OAuth for authentication",
                "tags": [
                    "Auth"
                ],
                "summary": "Start OAuth authentication",
                "responses": {
                    "303": {
                        "description": "Redirects to Google OAuth",
                        "headers": {
                            "X-Request-ID": {
                                "type": "string",
                                "description": "Request ID for tracing"
                            }
                        }
                    }
                }
            }
        },
        "/auth/callback": {
            "get": {
                "description": "Handles OAuth callback and exchanges authorization code for access token",
                "tags": [
                    "Auth"
                ],
                "summary": "OAuth callback handler",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization code from OAuth provider",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "State parameter for CSRF protection",
                        "name": "state",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication successful with access token",
                        "schema": {
                            "$ref": "#/definitions/models.AuthSuccessResponse"
                        },
                        "headers": {
                            "X-Request-ID": {
                                "type": "string",
                                "description": "Request ID for tracing"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - missing code or invalid state",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestErrorResponse"
                        },
                        "headers": {
                            "X-Request-ID": {
                                "type": "string",
                                "description": "Request ID for tracing"
                            }
                        }
                    },
                    "503": {
                        "description": "External service error - OAuth provider failure",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        },
                        "headers": {
                            "X-Request-ID": {
                                "type": "string",
                                "description": "Request ID for tracing"
                            }
                        }
                    }
                }
            }
        },
        "/posts": {
            "get": {
                "description": "Retrieve a list of all posts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get all posts",
                "responses": {
                    "200": {
                        "description": "List of posts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AuthData": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Authentication successful"
                },
                "token": {
                    "type": "string",
                    "example": "ya29.a0AfH6SMC..."
                }
            }
        },
        "models.AuthSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.AuthData"
                },
                "request_id": {
                    "type": "string",
                    "example": "req_8n3mN9pQ2x"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-12-01T10:30:00Z"
                }
            }
        },
        "models.BadRequestErrorDetail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "INVALID_REQUEST"
                },
                "message": {
                    "type": "string",
                    "example": "Authorization code is required"
                },
                "request_id": {
                    "type": "string",
                    "example": "req_8n3mN9pQ2x"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-12-01T10:30:00Z"
                }
            }
        },
        "models.BadRequestErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/models.BadRequestErrorDetail"
                }
            }
        },
        "models.ErrorDetail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "VALIDATION_FAILED"
                },
                "details": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "message": {
                    "type": "string",
                    "example": "The request contains 2 validation errors"
                },
                "request_id": {
                    "type": "string",
                    "example": "req_8n3mN9pQ2x"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-12-01T10:30:00Z"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/models.ErrorDetail"
                }
            }
        }
    }
}