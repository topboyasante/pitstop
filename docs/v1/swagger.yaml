basePath: /api/v1
definitions:
  dto.CreateCommentRequest:
    properties:
      content:
        maxLength: 1000
        minLength: 1
        type: string
    required:
    - content
    type: object
  dto.CreatePostRequest:
    properties:
      content:
        type: string
      user_id:
        type: string
    required:
    - content
    - user_id
    type: object
  dto.CreateUserRequest:
    properties:
      avatar_url:
        maxLength: 500
        type: string
      email:
        maxLength: 255
        type: string
      first_name:
        maxLength: 255
        type: string
      last_name:
        maxLength: 255
        type: string
      locale:
        maxLength: 10
        type: string
      provider:
        enum:
        - google
        - facebook
        - github
        type: string
      provider_id:
        type: string
    required:
    - email
    - provider
    - provider_id
    type: object
  dto.ExchangeCodeRequest:
    properties:
      code:
        type: string
      state:
        type: string
    required:
    - code
    - state
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  response.APIResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/response.ErrorInfo'
      message:
        type: string
      meta:
        $ref: '#/definitions/response.MetaInfo'
      success:
        type: boolean
      timestamp:
        type: string
    type: object
  response.ErrorInfo:
    properties:
      code:
        type: string
      details:
        type: string
      message:
        type: string
    type: object
  response.MetaInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: A RESTful API built with Go and Fiber
  title: Pitstop API
  version: "1.0"
paths:
  /auth/exchange:
    post:
      consumes:
      - application/json
      description: Exchange OAuth authorization code for JWT tokens
      parameters:
      - description: Code exchange request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ExchangeCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Exchange authorization code for JWT tokens
      tags:
      - auth
  /auth/google:
    get:
      consumes:
      - application/json
      description: Get Google OAuth authorization URL
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Initiate Google OAuth
      tags:
      - auth
  /auth/google/callback:
    get:
      description: Redirects to frontend with authorization code
      parameters:
      - description: Authorization code
        in: query
        name: code
        required: true
        type: string
      - description: CSRF state token
        in: query
        name: state
        required: true
        type: string
      responses:
        "302":
          description: Redirect to frontend
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Handle Google OAuth callback
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get current authenticated user information from JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new JWT tokens using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Refresh JWT tokens
      tags:
      - auth
  /posts:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of posts
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Posts per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new post
      parameters:
      - description: Post details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get a post by ID
      tags:
      - posts
  /posts/{post_id}/comments:
    get:
      description: Retrieve all comments for a specific post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get comments for a post
      tags:
      - Comments
    post:
      consumes:
      - application/json
      description: Create a new comment on a post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Create a new comment
      tags:
      - Comments
  /posts/{post_id}/comments/{comment_id}/like:
    post:
      consumes:
      - application/json
      description: Like or unlike a comment
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - BearerAuth: []
      summary: Toggle like on a comment
      tags:
      - likes
  /posts/{post_id}/comments/{comment_id}/like/status:
    get:
      consumes:
      - application/json
      description: Check if the authenticated user has liked a specific comment
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - BearerAuth: []
      summary: Check if user liked a comment
      tags:
      - likes
  /posts/{post_id}/comments/{comment_id}/likes:
    get:
      consumes:
      - application/json
      description: Retrieve all users who liked a specific comment
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get likes for a comment
      tags:
      - likes
  /posts/{post_id}/comments/{parent_comment_id}/reply:
    post:
      consumes:
      - application/json
      description: Create a reply to an existing comment
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: Parent Comment ID
        in: path
        name: parent_comment_id
        required: true
        type: string
      - description: Reply data
        in: body
        name: reply
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Create a reply to a comment
      tags:
      - Comments
  /posts/{post_id}/like:
    post:
      consumes:
      - application/json
      description: Like or unlike a post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - BearerAuth: []
      summary: Toggle like on a post
      tags:
      - likes
  /posts/{post_id}/like/status:
    get:
      consumes:
      - application/json
      description: Check if the authenticated user has liked a specific post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - BearerAuth: []
      summary: Check if user liked a post
      tags:
      - likes
  /posts/{post_id}/likes:
    get:
      consumes:
      - application/json
      description: Retrieve all users who liked a specific post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get likes for a post
      tags:
      - likes
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of users
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Users per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get a user by ID
      tags:
      - users
  /users/{user_id}/follow:
    post:
      consumes:
      - application/json
      description: Follow or unfollow a user
      parameters:
      - description: User ID to follow/unfollow
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - BearerAuth: []
      summary: Toggle follow on a user
      tags:
      - follows
  /users/{user_id}/follow/status:
    get:
      consumes:
      - application/json
      description: Check if the authenticated user is following a specific user
      parameters:
      - description: User ID to check
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - BearerAuth: []
      summary: Check follow status
      tags:
      - follows
  /users/{user_id}/followers:
    get:
      consumes:
      - application/json
      description: Retrieve all users who follow a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get followers for a user
      tags:
      - follows
  /users/{user_id}/following:
    get:
      consumes:
      - application/json
      description: Retrieve all users that a specific user is following
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get users being followed
      tags:
      - follows
swagger: "2.0"
