basePath: /api/v1
definitions:
  domain.PostType:
    enum:
    - question
    - tip
    - show_off
    - general
    type: string
    x-enum-varnames:
    - PostTypeQuestion
    - PostTypeTip
    - PostTypeShowOff
    - PostTypeGeneral
  dto.AuthURLResponse:
    properties:
      auth_url:
        type: string
    type: object
  dto.CreateGarageRequest:
    properties:
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - name
    type: object
  dto.CreatePostRequest:
    properties:
      car_tags:
        items:
          type: string
        type: array
      content:
        maxLength: 500
        minLength: 1
        type: string
      hashtags:
        items:
          type: string
        type: array
      location:
        maxLength: 100
        type: string
      media_urls:
        items:
          type: string
        type: array
      post_type:
        allOf:
        - $ref: '#/definitions/domain.PostType'
        enum:
        - question
        - tip
        - show_off
        - general
    required:
    - content
    - post_type
    type: object
  dto.GarageResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.GaragesResponse:
    properties:
      garages:
        items:
          $ref: '#/definitions/dto.GarageResponse'
        type: array
      has_next:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total_count:
        type: integer
    type: object
  dto.PostResponse:
    properties:
      car_tags:
        items:
          type: string
        type: array
      content:
        type: string
      created_at:
        type: string
      hashtags:
        items:
          type: string
        type: array
      id:
        type: integer
      like_count:
        type: integer
      location:
        type: string
      media_urls:
        items:
          type: string
        type: array
      post_type:
        $ref: '#/definitions/domain.PostType'
      reply_count:
        type: integer
      repost_count:
        type: integer
      user:
        $ref: '#/definitions/dto.UserResponse'
      user_id:
        type: integer
      view_count:
        type: integer
    type: object
  dto.PostsResponse:
    properties:
      has_next:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      posts:
        items:
          $ref: '#/definitions/dto.PostResponse'
        type: array
      total_count:
        type: integer
    type: object
  dto.RegisterRequest:
    properties:
      bio:
        maxLength: 500
        type: string
      email:
        type: string
      location:
        maxLength: 100
        type: string
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.UpdatePostRequest:
    properties:
      car_tags:
        items:
          type: string
        type: array
      content:
        maxLength: 500
        minLength: 1
        type: string
      hashtags:
        items:
          type: string
        type: array
      location:
        maxLength: 100
        type: string
    type: object
  dto.UpdateProfileRequest:
    properties:
      bio:
        maxLength: 500
        type: string
      location:
        maxLength: 100
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  dto.UserResponse:
    properties:
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      follower_count:
        type: integer
      following_count:
        type: integer
      id:
        type: integer
      is_verified:
        type: boolean
      location:
        type: string
      reputation:
        type: integer
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: A RESTful API built with Go and Fiber
  title: Pitstop API
  version: "1.0"
paths:
  /auth/google:
    get:
      consumes:
      - application/json
      description: Get Google OAuth authorization URL
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthURLResponse'
      summary: Initiate Google OAuth
      tags:
      - auth
  /auth/google/callback:
    get:
      consumes:
      - application/json
      description: Exchange authorization code for access token
      parameters:
      - description: Authorization code
        in: query
        name: code
        required: true
        type: string
      - description: CSRF state token
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Handle Google OAuth callback
      tags:
      - auth
  /auth/profile:
    put:
      consumes:
      - application/json
      description: Update user profile information
      parameters:
      - description: Profile update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update user profile
      tags:
      - auth
  /auth/profile/{id}:
    get:
      consumes:
      - application/json
      description: Get user profile information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user profile
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /garages:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of garages
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Garages per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GaragesResponse'
      summary: Get all garages
      tags:
      - garages
    post:
      consumes:
      - application/json
      description: Create a new garage
      parameters:
      - description: Garage details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateGarageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.GarageResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new garage
      tags:
      - garages
  /garages/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific garage
      parameters:
      - description: Garage ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GarageResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a garage by ID
      tags:
      - garages
  /posts:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of posts
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Posts per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PostsResponse'
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new post
      parameters:
      - description: Post details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PostResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Retrieve a specific post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PostResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update an existing post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PostResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a post
      tags:
      - posts
swagger: "2.0"
